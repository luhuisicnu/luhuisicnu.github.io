(function(n){function t(t){for(var r,a,s=t[0],c=t[1],p=t[2],u=0,m=[];u<s.length;u++)a=s[u],i[a]&&m.push(i[a][0]),i[a]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);l&&l(t);while(m.length)m.shift()();return o.push.apply(o,p||[]),e()}function e(){for(var n,t=0;t<o.length;t++){for(var e=o[t],r=!0,s=1;s<e.length;s++){var c=e[s];0!==i[c]&&(r=!1)}r&&(o.splice(t--,1),n=a(a.s=e[0]))}return n}var r={},i={app:0},o=[];function a(t){if(r[t])return r[t].exports;var e=r[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,a),e.l=!0,e.exports}a.m=n,a.c=r,a.d=function(n,t,e){a.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},a.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,t){if(1&t&&(n=a(n)),8&t)return n;if(4&t&&"object"===typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(a.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)a.d(e,r,function(t){return n[t]}.bind(null,r));return e},a.n=function(n){var t=n&&n.__esModule?function(){return n["default"]}:function(){return n};return a.d(t,"a",t),t},a.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},a.p="/";var s=window["webpackJsonp"]=window["webpackJsonp"]||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var p=0;p<s.length;p++)t(s[p]);var l=c;o.push([0,"chunk-vendors"]),e()})({0:function(n,t,e){n.exports=e("56d7")},"098a":function(n,t,e){n.exports=e.p+"img/artoftravel.d2d68327.jpg"},1053:function(n){n.exports=[{text:"主页",to:{name:"home"}},{text:"分类",to:{name:"category"}},{text:"个人",to:{name:"self"}},{text:"收藏",to:{name:"collection"}},{text:"底线",href:"#footer"},{text:"刷新",refresh:!0}]},"10bd":function(n,t,e){n.exports=e.p+"img/blurcamera.d2d68327.jpg"},"139c":function(n,t,e){n.exports=e.p+"img/christmas.4f9467fe.jpg"},1597:function(n,t,e){n.exports=e.p+"img/marketgrains.d7d69cd3.jpg"},"17fc":function(n,t,e){n.exports=e.p+"img/adventurealtitude.e337bb38.jpg"},"1c5b":function(n,t,e){n.exports=e.p+"img/ancientruins.1c172655.jpg"},3023:function(n,t,e){n.exports=e.p+"img/spices.1d2c7a7a.jpg"},"36f5":function(n,t,e){n.exports=e.p+"img/swedishfishing.1d2f0469.jpg"},"3a3c":function(n,t,e){n.exports=e.p+"img/sunset.8d1393f5.jpg"},"3db9":function(n,t,e){n.exports=e.p+"img/adventurecave.0e8b8892.jpg"},"56d7":function(n,t,e){"use strict";e.r(t);e("7f7f"),e("cadf"),e("551c"),e("f751"),e("097d");var r=e("2b0e"),i=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-app",[e("div",{attrs:{id:"app"}},[e("Toolbar"),e("Drawer"),e("v-content",[e("v-container",[e("router-view")],1)],1),e("Footer",{attrs:{id:"footer"}})],1)])},o=[],a=function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("v-toolbar",{attrs:{app:"",flat:""}},[r("v-toolbar-side-icon",{staticClass:"hidden-md-and-up",on:{click:n.toggleDrawer}}),r("v-container",{attrs:{"mx-auto":"","py-0":""}},[r("v-layout",[r("v-img",{staticClass:"mr-5",attrs:{src:e("cf05"),contain:"",height:"48"},on:{click:function(t){return n.$vuetify.goTo(0)}}}),n._l(n.links,function(t,e){return r("v-btn",{key:e,staticClass:"ml-0 hidden-sm-and-down",attrs:{to:t.to,flat:""},on:{click:function(e){return n.onClick(e,t)}}},[n._v("\n        "+n._s(t.text)+"\n      ")])}),r("v-spacer"),r("v-autocomplete",{staticClass:"mx-3",attrs:{items:n.items,"search-input":n.search,"cache-items":"",flat:"","hide-no-data":"","hide-details":"",label:"搜索标题","solo-inverted":""},on:{"update:searchInput":function(t){n.search=t},"update:search-input":function(t){n.search=t}},model:{value:n.select,callback:function(t){n.select=t},expression:"select"}})],2)],1)],1)},s=[],c=e("cebc"),p=e("2f62"),l={data:function(){return{select:-1,search:""}},computed:Object(c["a"])({},Object(p["c"])(["links","articles"]),{items:function(){return this.articles.map(function(n,t){return{text:n.title,value:t}})}}),watch:{select:function(n){n>-1&&(this.select=-1,this.$router.push({name:"article",params:{index:n}}))}},methods:Object(c["a"])({},Object(p["b"])(["toggleDrawer"]),{onClick:function(n,t){n.stopPropagation(),t.refresh?this.$router.go(0):!t.to&&t.href&&this.$vuetify.goTo(t.href)}})},u=l,m=e("2877"),d=Object(m["a"])(u,a,s,!1,null,null,null),f=d.exports,g=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-navigation-drawer",{attrs:{app:"",dark:"",temporary:""},model:{value:n.drawer,callback:function(t){n.drawer=t},expression:"drawer"}},[e("v-list",n._l(n.links,function(t,r){return e("v-list-tile",{key:r,attrs:{to:t.to,href:t.href},on:{click:function(e){return n.onClick(e,t)}}},[e("v-list-tile-title",{domProps:{textContent:n._s(t.text)}})],1)}),1)],1)},h=[],b={name:"CoreDrawer",computed:Object(c["a"])({},Object(p["c"])(["links"]),{drawer:{get:function(){return this.$store.state.drawer},set:function(n){this.setDrawer(n)}}}),methods:Object(c["a"])({},Object(p["b"])(["setDrawer"]),{onClick:function(n,t){if(n.stopPropagation(),"/"===t.to)return this.$vuetify.goTo(0),void this.setDrawer(!1);!t.to&&t.href&&(this.$vuetify.goTo(t.href),this.setDrawer(!1))}})},_=b,v=Object(m["a"])(_,g,h,!1,null,null,null),x=v.exports,y=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-footer",{staticClass:"py-4",attrs:{dark:"",height:"auto"}},[e("v-container",{attrs:{"mx-auto":""}},[e("v-layout",{attrs:{wrap:""}},[e("v-flex",{attrs:{xs9:""}},n._l(n.items,function(t,r){return e("base-btn",{key:r,staticClass:"ml-0 mr-3",attrs:{href:t.href,color:"primary",square:"",target:"_blank"}},[e("v-icon",{domProps:{textContent:n._s(t.icon)}})],1)}),1),e("v-spacer"),e("base-btn",{staticClass:"mr-0",attrs:{square:"",title:"Go to top"},on:{click:function(t){return n.$vuetify.goTo(0)}}},[e("v-icon",[n._v("mdi-chevron-up")])],1)],1)],1)],1)},k=[],j={data:function(){return{items:[{href:"#!",icon:"mdi-twitter"},{href:"#!",icon:"mdi-instagram"},{href:"#!",icon:"mdi-facebook"},{href:"#!",icon:"mdi-google-plus"},{href:"#!",icon:"mdi-reddit"},{href:"#!",icon:"mdi-discord"},{href:"#!",icon:"mdi-pinterest"}]}}},w=j,D=Object(m["a"])(w,y,k,!1,null,null,null),C=D.exports,M={name:"app",components:{Toolbar:f,Drawer:x,Footer:C}},O=M,P=Object(m["a"])(O,i,o,!1,null,null,null),T=P.exports,B="我们知道，Python2.X版本的字符串有两种：字符串和Unicode字符串。因为这两种字符串类型，导致无数的本地化应用出现字符串类型的错误。而现在，Python3.0的字符串全部采纳Unicode方案，并强化了b类型字符序列概念，并将字符序列和字符串进行了区分，不能执行`+`操作。\n\n## 本地化编程\n这个变化不但解决了长久以来的字符串兼容问题，而且让我们在编程过程中可以使用非英文字符作为变量名，如下：\n```\nIn [1]: 打印函数 = print\n\nIn [2]: def 测试函数(变量):  # 注意，函数的括号必须是半角的，也就是英文输入法下的括号\n   ...:     打印函数(变量)\n   ...:     \n\nIn [3]: 名字 = 'Python3要翻天'  # 空格、等号和引号也必须用半角的\n\nIn [4]: 测试函数(名字)\nPython3要翻天\n```\n\n虽然在实际编程中，大部分情况下都使用英文作为变量名，但是不排除在教育行业以及本地化项目中使用这种编程风格。\n\n## 类型区别\n虽然全面使用了unicode字符串，但是在Python解释器中，其类型的名称已经改成了`str`，以表示其普遍性。\n字符串和字符序列的类型区别如下：\n```\nIn [10]: a = '1'\n\nIn [11]: a.__class__\nOut[11]: str\n\nIn [12]: b = b'1'\n\nIn [13]: b.__class__\nOut[13]: bytes\n\nIn [14]: a + b\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-22-f96fb8f649b6> in <module>()\n----\x3e 1 a + b\n\nTypeError: Can't convert 'bytes' object to str implicitly\n\n```\n\n## 使用区别\n字符串和字符序列被区分成文本和数据，因此，在程序内部交互中，使用字符串更加方便，一旦需要进行IO交互，则可能会使用到字符序列了。不过，大部分接口支持接受字符串作为输入，并自动将其编码为默认编码的字符序列。\n示例如下：\n```\nIn [15]: sys.getdefaultencoding()  # 获取平台的默认编码\nOut[15]: 'utf-8'\n\nIn [16]: with open('test.file', 'w') as f:   ## 默认编码为平台的默认编码\n   ....:     f.write('测试文本')\n   ....:     \n\nIn [17]: with open('test.file', 'wb') as f:  ## 直接写入字符序列，不用理会编码问题\n   ....:     f.write('测试文本'.encode('utf-8'))\n   ....:   \n```\n\n",W="自Python3.0起，Python中的`print`关键字被移除，想要便捷地打印字符串，可以使用`print()`函数。\n\n>虽然Python2.7支持了`print()`函数，但是却没有移除`print`关键字，因此直接`type(print)`是会报错的。\n>```\n>In [1]: type(print)\n>  File \"<ipython-input-1-961b0c77d407>\", line 1\n>    type(print)\n>             ^\n>SyntaxError: invalid syntax\n>```\n## print关键字和函数的使用对比\n##### 打印一个对象\n关键字版本：\n```\nprint x\n```\n函数版本：\n```\nprint(x)\n```\n##### 打印多个对象\n关键字版本：\n```\nprint x, y, z\n```\n函数版本：\n```\nprint(x, y, z)\n```\n##### 设置重定向\n关键字版本：\n```\nprint >> sys.stderr, \"xxx\"\nwith open(\"test.log\", \"w\") as f:\n    print >> f, \"test line\"\n```\n函数版本：\n```\nprint(x, file=sys.stderr)\nwith open(\"test.log\", \"w\") as f:\n    print(\"test line\", file=f)\n```\n##### 设置分隔符\n关键字版本：\n```\nprint x, y  # 分隔符只能是单个空格\n```\n函数版本：\n```\nprint(x, y, step=\",\")  # 通过step设置想要的分隔符，默认仍然是单个空格\n```\n##### 设置结束符\n关键字版本：\n```\nprint x\nprint x,    # 结束符只能是单个空格或者换行符\n```\n函数版本：\n```\nprint(x, end=\"\\n\")  #通过end设置想要的结束符 \n```\n##### 设置刷新输出流\n关键字版本：\n```\nprint x    # 因为只能以换行符结束，所以默认每次执行print语句都刷新输出流\n```\n函数版本：\n```\nprint(x, flush=False)  #通过flush设置是否刷新输出流，一旦输出流中包含换行符就马上刷新输出流。需要注意默认的结束符是换行符，所以实际上默认也是直接刷新输出流\n```\n\n## 利用print函数实现一个命令行动画\nprint_load.py\n```\nimport time\n\ndef load():\n    for i in range(1, 101):\n        print('{0:>3d}%  '.format(i)+'#'*i+'-'*(100-i), end='', flush=True)\n        print('\\x08'*106, end='')  # 这是显示文本式动画的诀窍所在:使用退格符(或者\\r)把光标移回来\n        time.sleep(0.1)\n    print(' ' * 106 + '\\x08' * 106, end='')  # 使用空格清除状态消息,把光标移回开头 \n\nif __name__ == '__main__':\n    load()\n\n```\n运行命令`python3 print_load.py`将会看到不断加载进度的命令行动画\n## print函数替换关键字的原因\n这一切可以在2006年被提出的[PEP3105](https://www.python.org/dev/peps/pep-3105/)中找到。\n* 打印功能是唯一一个使用关键字实现的应用程序级别的功能。在Python的世界里，关键字通常是功能实现的最后的手段。\n* 使用`print()`可以实现更复杂的打印输出格式（虽然`format`函数也提供格式化功能）。并且重定向文件时表示得更清晰易懂。\n* 相比关键字，函数的迭代更加方便，兼容性更佳。\n* `print`关键字的分隔符不能变换，这点极其不便。\n* `print()`以函数的形式呈现，是一个概念上的巨大飞跃。这意味着我们可以轻易联想到，将字符串输出到`sys.stdout`或其他文件来理解它，工作流程类似于文件读写。\n",F='## 使用场景\n几乎所有Web网站都会使用图片。社交网站的用户使用头像标识个性身份，晒图分享个人动态；网购网站展示不同商品的图片，以供消费者挑选；新闻网站发布图片到文章中，增强渲染力；就连简书这样的文学性网站，也推荐在文章中插图，以舒缓阅读疲劳；多数网站提供favicon.ico图片用以在浏览器标签栏上做标识；多数网站都用创意性的Logo图片展示在网站以提高辨识度和品牌形象。\n\n## 图片的展示\n我们知道，图片在Web页面中的显示，使用<img>元素，并在该元素的src属性中，设置图片的url以获取图片的资源来展示。如下：\n```\n<img src="http://www.example.com/pictures/1.png">\n```\n这种形式的图片显示，将会在html上的该位置，以图片的原尺寸直接显示图片。假如图片像素是300x200，那么就会以300x200的像素显示出来。\n\n有时，我们会将图片放到另一个html元素内部来显示。假如这个元素是一个height x width = 200 x 100 的<div>，那么图片就会只能展示左上角的200 x 100像素的部分了。为了解决这种尴尬情况，可以手动指定图片的高度和宽度，以缩略图的方式全部展示。如下:\n```\n<img height="200px" width="100px" src="http://www.example.com/pictures/1.png">\n```\n\n这样做索然可以让图片全部显示，但是新的问题产生了，图片发生了扭曲。事实上，原尺寸的高度和宽度的比例是300/200 = 3/2，手动设定为200/100之后，就变成了2/1，就会让图片发生上下拉伸的现象。如果比例比3/2小，又会出现左右拉伸的现象。为了解决这个问题，我们的图片的缩放，就只能按照原来尺寸的比例来进行。可以对height或width设置百分比属性，来继承底层html元素的尺寸。如下：\n```\n<img width="100%" src="http://www.example.com/pictures/1.png">\n```\n这样一来，图片的宽度就变成了100px，其高度会按照原比例进行缩放，变成150px。\n\n另外，我们还可以将图片设置成元素的背景图像，并调整图片的透明度。\n\n## 图片的加载\n老版本的浏览器，图片只能通过其src属性从服务器上加载。基于html5规范的新版浏览器，新增支持从浏览器本地客户端上加载图片(和文件)。利用这个新特性，我们上传和显示图片，再也不需要先上传到服务器了，直接在本地加载到浏览器上显示和处理，然后再上传到服务器，这样可以更加节约带宽，提升用户体验。\n\n这是一个本地加载图片的demo：\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <img id="image" src="">\n    <input type="file" id="picture">\n    <script type="text/javascript" src="https://code.jquery.com/jquery-3.1.1.slim.min.js"><\/script>\n    <script type="text/javascript">\n      $(\'#picture\').change(function () {\n          var pictureFile = this.files[0];\n          var url = window.URL.createObjectURL(pictureFile);\n          $(\'#image\').attr(\'src\', url);\n      });\n    <\/script>\n  </body>\n</html>\n```\n\n## 图片的处理\n直接从图片文件中获取的图片，不一定在尺寸和显示内容上让我们满意，有时候，我们需要先处理这些图片，再上传到服务器上。\n\n当然，我们可以在本地打开类似Photoshop这样的图片处理软件来处理好图片之后，再执行上传操作，但是这样就费时费力，用户体验不佳了。在只需要简单裁剪、旋转和缩放处理的情况下，我们可以直接在浏览器上完成。这时候，可以依赖一些js插件来辅助处理图片。比如我们要介绍的[cropper](https://github.com/fengyuanchen/cropper)。\n\n使用cropper插件，我们可以轻松完成图片的裁剪、旋转和缩放处理。如果需要更多的处理，则建议用专业图像工具来处理了。\n\n使用cropper处理完的图片，我们可以通过其`getCroppedCanvas`方法来获取裁剪后的canvas对象。\n\n![裁剪图片](/WebImageExample.png)\n\n\n## 处理后图片的展示\n我们获得裁剪图片的canvas对象后，利用canvas对象的toBlob方法来获取裁剪图片的blob对象以及进行相应处理的回调函数。blob对象是File对象的基础对象，所以，我们使用这个对象，也可以显示成图片。代码片段如下：\n```\n$(\'#cropper-img\').cropper(\'getCroppedCanvas\', {\n            width: 400,\n            height: 400,\n            minWidth: 256,\n            minHeight: 256,\n            maxWidth: 4096,\n            maxHeight: 4096,\n            fillColor: \'#fff\',\n            imageSmoothingEnabled: false,\n            imageSmoothingQuality: \'high\'\n}).toBlob(function(blob) {\n            var croppedUrl = window.URL.createObjectURL(blob);\n            $(\'#image\').attr(\'src\', croppedUrl);\n});\n```\n\n## 处理后图片的上传\n我们处理图片的最终目的还是为了上传到服务器。所以当我们看了裁剪图片令人满意之后，就可以着手上传图片了。\n首先，我们可以将blob对象创建为File对象，然后用ajax方法上传这个File对象到服务器上。修改后代码片段如下：\n```\ntoBlob(function(blob) {\n  var croppedUrl = window.URL.createObjectURL(blob);\n  $(\'#image\').attr(\'src\', croppedUrl);\n  var formData = new FormData();\n  var pictureFile = new File([blob], $(\'#picture\').val());\n  formData.append(\'picture\', pictureFile);\n  $.ajax("path/to/upload-picture", {\n     method: "POST",\n     data: formData,\n     processData: false,\n     contentType: false,\n     success: function () {\n        console.log(\'Upload success\');\n     },\n     error: function () {\n        alert("Upload error");\n     }\n  });\n});\n```\n\n## Demo\n可以参照[cropper的demo](https://fengyuanchen.github.io/cropper/)体验截图操作，以及其案例的[源码](https://github.com/fengyuanchen/cropper/tree/master/examples)。\n本文示例[源码地址](https://github.com/luhuisicnu/island/blob/master/customize_auth/templates/customize_auth/user_edit.html)\n\n## 参考文章\n[利用html5 file api读取本地文件（如图片、PDF等）](https://segmentfault.com/a/1190000004084956)\n[cropper README](https://github.com/fengyuanchen/cropper/blob/master/README.md)\n',$="Web开发中，需要使用数据库存储数据。这些数据大多数都是相互关联的，存储和使用这样的数据，我常用关系型数据库Mysql来实现。这里，我设计一个用户数据模型，用来举例说明这些数据之间的关系。\n\n##独立的数据\n我规划了一张表user，用来存储用户基础信息，字段包含主键id和用户名username，看起来这张表是这样的：\n\nid | username \n----|----\n1 | 张三\n2 | 李四\n3 | 王五\n\n当我们查询user表时，就会得到包含这两个字段的数据行。这样的数据，与其他表没有任何关联，和表本身也没有关联，可以被称为**独立的数据**，这样的数据，非常适合存储到非关系数据库中。不过，我们的用户表还会修改设计，因为，用户表会关联其他表。\n\n##一对一关系\n我们的用户表中，字段太少了，不能描述用户的丰富属性。这时候，我们有两种选择：\n　　1. 给用户表增加字段\n　　2. 使用一张新的表格（用户信息表user_info）来存储用户扩展信息\n直接给用户表增加字段，适合用户字段本身不多，并且增加的字段不会影响其他字段的情况；否则，我们可以新建一张表来存储这些用户信息。用户信息表设计如下：\n\nid | sex | email \n----|----|----\n1 | 男 | zs@test.com\n2 | 男 | ls@test.com\n3 | 男 | ww@test.com\n\n**那么，两张表如何关联呢？**\n根据设计要求，一条用户表的数据，对应一条用户信息表的数据，这样的对应关系，称为一对一关系。既然如此，我们可以给用户表增加一个字段，存储对应用户信息表的主键。这样一来，我们想要知道用户的扩展信息，需要两步操作：１、查找用户表，找到用户的关联用户信息表的主键。２、根据用户信息表的主键，查找到用户的扩展信息。\n根据用户信息表的一条数据的主键，到用户表中，也可以查询到用户表中的具体数据。\n更改后的用户表如下：\n\nid | username | info_id\n----|----|----\n1 | 张三 | 1\n2 | 李四 | 2\n3 | 王五 | 3\n\n> 当然，我们也可以将关联主键的字段放到用户信息表中，这样的话，可以保持用户表字段较少，那么我们就不要修改用户表，用户信息表修改如下：\n>\n> id | sex | email | user_id\n> ----|----|----|----\n> 1 | 男 | zs@test.com | 1\n> 2 | 男 | ls@test.com | 2\n> 3 | 男 | ww@test.com | 3\n> \n> 甚至，我们可以用户表存储用户信息表的对应主键，并且用户表存储用户信息表的主键，这样做会增加一些存储成本，不过可以提高可读性。\n\n## 多对一关系\n多对一关系，也叫作一对多关系。网站一般会对用户进行分组，我们也需要设计用户分组表，如下：\n\nid | groupname \n----|----\n1 | 管理员\n2 | 会员\n\n一个用户分组中包含了若干个用户，如何存储这样的关系呢？我们可以考虑，在用户组表中增加一个字段，来存储其包含的用户的主键，如下：\n\nid | groupname | user_id_list\n----|----|----\n1 | 管理员 | 1,2\n2 | 会员 | 3\n\n我们知道，关系数据库的字段只能存储简单的数据类型，例如数字，字符串，时间等，不支持存储一个列表。所以这里，我们需要将列表数据转换成一个字符串来存储，取出来用的时候，我们需要再将其转换成列表。每次用户组的用户变动时，需要对字段user_id_list改动时，则变得麻烦。这时候，推荐另一种多对一的关联方式：在用户表中添加字段group_id，如下：\n\nid | username | info_id | group_id\n----|----|----|----\n1 | 张三 | 1 | 1\n2 | 李四 | 2 | 1\n3 | 王五 | 3 | 2\n\n更改用户组的用户成员时候，只需要修改对用用户的group_id即可，查询时根据group_id查询即可。\n\n##多对多关系\n不同的用户组权限不同，我们需要设计一张权限表，如下：\n\nid | permissions \n----|----\n1 | 禁用用户\n2 | 修改自己的信息\n\n管理员不仅可以修改自己的信息，还可以禁用其他用户，而会员只能修改自己的信息。这时候我们可以发现，管理员对应的权限有两个：禁用用户和修改自己的信息。而修改自己的信息这项权限，同时被两个用户组拥有：管理员和会员。想这样的关系，是典型的多对多关系。\n\n**如何根据这样的关系，设计表呢？**\n根据之前的经验，我们会想到，给用户组表或者权限表增加字段，用来存储其对应的关系表的主键。使用这样的办法，我们就会陷入到多对一关系中的不良案例中——利用一个字段存储多个关系主键。\n\n这时候，我们需要跳出原有思维，新建一张用户组－权限关系表(group_permissions)，来存储他们的多对多关系，如下：\n\nid | group_id | permissions_id\n----|----|----\n1 | 1 | 1\n2 | 1 | 2\n3 | 2 | 2\n\n使用查询语句`select permissions_id from group_permissions where group_id=1`来查询管理员拥有的权限id列表；使用查询语句`select group_id from group_permissions where permissions_id=2`来查询拥有需改自己的信息的用户组id列表。\n\n##自关联一对一关系\n网站设计了推荐机制，如果一个用户通过另一个用户推荐注册，那么保存这个用户的推荐人。分析得知，一个用户的推荐人只能是另一个已存在的用户，这是一对一关系，区别是，这个一对一关系，关联的是用户表本身。\n\n解决方案仍然是老办法，给用户表增加一个字段recommended_id，用来关联其对应的推荐人。用户表如下：\n\nid | username | info_id | group_id | recommended_id\n----|----|----|----|----\n1 | 张三 | 1 | 1 | null\n2 | 李四 | 2 | 1 | 1\n3 | 王五 | 3 | 2 | 2\n\n##自关联多对一关系\n网站设计黑名单机制，用户可以拉黑不喜欢的其他用户。分析得知，一个用户可以拉黑多个其他用户，那么这是一个自关联的多对一关系。\n\n就像之前的多对一关系那样，我们尝试使用增加字段的方式来解决这个问题。设计如下：\n\nid | username | info_id | group_id | recommended_id | blacklist_id_list\n----|----|----|----|----|----\n1 | 张三 | 1 | 1 | null | 2, 3\n2 | 李四 | 2 | 1 | 1 | 1\n3 | 王五 | 3 | 2 | 2 | 1, 2\n\n可以看出来，又陷入到了单一字段存储多个关系主键的问题了。解决办法也一样，单独创建一张黑名单关系表(blacklist)来存储黑名单关系，如下：\n\nid | user_id | blacklist_user_id\n----|----|----\n1 | 1 | 2\n2 | 1 | 3\n3 | 2 | 1\n4 | 3 | 1\n5 | 3 | 2\n\n##自关联多对多关系\n网站需要增加粉丝和关注机制，用户可以关注其他用户，用户可以得知自己有哪些粉丝。分析得知，这是典型的自关联多对多关系。\n\n尝试使用一张单独的粉丝关系表(fans)来存储分析关系，如下：\n\nid| user_id | fans_id\n----|----|----\n1 | 1 | 2\n2 | 1 | 3\n3 | 2 | 1\n4 | 3 | 1\n5 | 3 | 2\n\n经简单的验证，可以得知，这样的设计可以完全满足粉丝机制的需求。\n\n## 总结\n通过网站用户和权限的简单设计案例，我们梳理了独立数据、一对一关系、多对一关系、多对多关系、自关联一对一关系、自关联多对一关系和自关联多对多关系的需求分析和设计实现，可以自如地处理这些复杂的关联关系。\n\n最终的字段和数据如下：\n**user**\n\nid | username | info_id | group_id | recommended_id \n----|----|----|----|----\n1 | 张三 | 1 | 1 | null \n2 | 李四 | 2 | 1 | 1 \n3 | 王五 | 3 | 2 | 2\n\n**user_info**\n\nid | sex | email \n----|----|----\n1 | 男 | zs@test.com\n2 | 男 | ls@test.com\n3 | 男 | ww@test.com\n\n**group**\n\nid | groupname \n----|----\n1 | 管理员\n2 | 会员\n\n**permissions**\n\nid | permissions \n----|----\n1 | 禁用用户\n2 | 修改自己的信息\n\n**group_permissions**\n\nid | group_id | permissions_id\n----|----|----\n1 | 1 | 1\n2 | 1 | 2\n3 | 2 | 2\n\n**blacklist**\n\nid | user_id | blacklist_user_id\n----|----|----\n1 | 1 | 2\n2 | 1 | 3\n3 | 2 | 1\n4 | 3 | 1\n5 | 3 | 2\n\n**fans**\n\nid| user_id | fans_id\n----|----|----\n1 | 1 | 2\n2 | 1 | 3\n3 | 2 | 1\n4 | 3 | 1\n5 | 3 | 2\n",R="日志是数据，数据却不一定是日志。日志主要用于记录发生过的事件，写入和查询是常用操作，不推荐对其进行修改操作，日志过量或者过期的时候，需要清理。\n\n日志是应用不可分割的一部分，没有日志的应用是残缺的。依赖日志，我们可以追溯故障、找出BUG、统计数据和分析用户行为。适当的日志可以提供帮助，日志太少和太多都会造成不良影响。\n\n本文讨论了Web应用的HTTP日志、应用日志和用户日志。\n## HTTP日志\n正规部署的Web应用，都会使用类似Nginx, Apache这样的Web服务器来做反向代理以及负载均衡。这样一来，就由这一层服务来搜集HTTP日志。即便是开发模式下，使用开发Web服务器，也会产生HTTP日志。一般的HTTP日志，至少会包含这些字段：日志产生时间、HTTP method、url path、HTTP协议版本、响应状态码、响应字节大小、访问者ip、代理服务器ip、请求处理耗时、Referrer、User Agent。\n* 根据访问者ip、代理服务器ip分析用户身份\n   * 我们知道，访问Web服务的过程中，用户发起的请求，可能会经过层层转发之后，才能抵达最终的Web内容提供者的服务器。每次请求转发，实际上是代理服务器发起一个新的请求，对接的服务器识别到的访问者ip就会变成代理服务器的ip，为了解决这个问题，代理服务器会将原始请求客户端的ip也保存起来，一并添加到转发的请求中。这样一来，最终内容提供者的服务器就会识别到两个ip，一个是访问者ip，另一个是代理服务器ip。\n  \n  * 互联网上，部分访问者不愿意提供自身的真实信息（这类人包含隐私保护用户和黑客等），就会使用代理服务器掩盖自身的真实ip，或者是伪造虚假的ip，我们可以从访问日志中初窥端倪。\n\n  * 日志中只有访问者ip，没有代理服务器ip，可以判断：该访问者的访问不经过代理服务器，或者该访问者是一个高匿名的代理服务器；日志中的访问者ip和代理服务器ip相同，可以判断：该访问者使用了匿名代理服务器；日志中的访问者ip和代理服务器ip不同，可以判断：该访问者使用了透明代理服务器，或者该访问者使用了欺骗性代理服务器。\n\n* 根据访问者ip短时间的出现次数，判断是否受到攻击\n  * 每个网站，根据其流行程度，可以制定出一份不同时间间隔、正常访问量阈值的报表。对比这份报表，和我们监控的每个ip在单位时间范围内的访问量，我们可以分析出该ip是否正在进行违规访问操作。\n\n  * 例如，某个ip在一分钟之内访问网站1000次，而其他ip只有每分钟几十次，正常阈值是100，那么这个ip就可以划入重点监控范围，继续分析其访问的url path，访问的方法类型等，判断它是否正在违规操作，一旦确认，就可以进行封禁ip的操作。\n\n* 根据User Agent分析客户端类型\n  * Web请求中，一般会包含一个字段用来描述发起请求的客户端版本类型信息，例如`Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36`，有的Web服务器为了提高兼容性，会根据客户端的版本情况，返回不同的响应，以提高用户体验。当然，还可以根据客户端类型，统计分析网站访问者的客户端环境分布情况。\n\n  * 各大搜索引擎，都有自己的爬虫机器人。这些爬虫机器人，会根据网站的开放情况，来爬取其网页信息，大多数开放的网站，都十分欢迎搜索引擎的爬虫机器人，借此提高其搜索排名。\n\n  * 数据分析公司，会到感兴趣的网站上爬取内容，分析数据，生成行业报表。这种对网站内容提供者没什么好处的访问，就不那么受欢迎了，特别是数据分析公司的爬虫，不是那么规范的情况下。网站内容提供者限制非浏览器和搜索引擎爬虫之后，数据分析公司的爬虫，一般就会伪装成二者，进行内容爬取。爬虫攻防战，值得大书特书了，这里就不细说。\n\n* 根据响应状态码，判断请求和响应的状态\n  * HTTP响应状态码，大致分为四类：成功响应200~299，重定向响应300~399，客户端请求错误400~499, 服务器响应错误500~599。\n\n  * 短时间大量出现重定向响应，可以判断为网站的链接可能有反复循环的情况，可以根据url情况加以排查。\n\n  * 短时间大量出现客户端请求错误，可以判断为：1、网站提供了错误的url path，2、爬虫机器人正在暴力扫描网站，3、网站攻击者正在攻击网站。具体情况再根据真实响应码和url判断。\n\n  * 短时间大量出现服务器响应错误，可以判断为：1、Web应用代码出现BUG（响应码500），2、Web应用进程出现问题（响应码502），3、Web应用出现性能瓶颈(响应码504)\n\n* 根据url path数量分布，分析网站热点\n  * 统计url path的分布，对热点url path进行排名，可以得知网站的热点在哪里，从而进行热点分流，性能优化，也可以为运营团队提供数据支撑。\n\n* 根据响应字节大小和请求处理耗时，分析响应缓慢的原因\n  * 已知某个url path的页面访问非常慢，根据HTTP日志进行分析时，可以查看其响应字节大小和请求处理耗时。\n\n  * 响应字节很小，比如少于1M，请求处理耗时也很少，比如少于100ms，那么：1、有可能是客户端的带宽很少，或者网络故障导致的。2、有可能该url path页面需要加载其他资源，并依赖于其他资源来显示页面，而访问其他资源缓慢导致该url path的页面缓慢。\n\n  * 响应字节较大，比如超过10M，请求处理耗时很少，比如不超过1s，那么原因很简单，代理服务器到客户端的网络带宽限制导致的。\n\n  * 响应字节很小，比如少于1M，请求处理耗时很大，比如超过5s，那么原因很简单，Web应用在处理该url path请求的时候，因为性能、网络、算法或数据处理量过大的原因导致的。\n\n  * 响应字节较大，比如超过10M，请求处理耗时也很大，比如超过5s，那么原因很简单，就是文件过大导致下载缓慢。\n\n* 根据Referrer设置防盗链，统计流量来源\n  * 我们在云平台上存储了图片，提供自己的网站使用，云平台按照资源访问量收费。这时候，其他网站盗用了我们的图片链接，我们就会为其他网站的流量付费，这时候，就需要用到防盗链。当然，我们自己网站的资源，不想提供给其他网站使用时，也可以设置防盗链。\n\n  * 请求中带的Referrer键，其值是跳转到当前请求的上一个请求的完整url，我们在网页中嵌入了图片，加载图片时Referrer就会带上该网页的url，百度上搜索一个关键字出来的网页，上面有广告链接，点击之后，访问该广告的网页，也会在Referrer中带上百度的url。\n\n  * 通过Web应用中，根据请求的Referrer，是否在白名单之内，来决定是否返回正确的内容，就是防盗链技术的核心思想了。如果没有提供Referrer，那就是直接访问了，网站也可以自行决定是否提供内容。当然，其他网站也可以使用伪装和匿名技术来突破防盗链的防御，所以，防盗链技术，防君子不防小人。\n\n  * 广告网页通过Referrer统计流量来源，从而为对方付费，这就是广告来源统计和计费的核心。当然，也可以通过url上添加参数的情况来进行来源统计，例如我们常用的邀请码机制，url类似`http://www.example.com/register?code=xxxxxx`，其中的`code=xxxxxx`，就是给网站说明了，访问网页的来源。\n\n## 应用日志\n应用日志是Web应用直接产生的。应用日志可以接入到操作系统的日志系统中，例如syslog，也可以自行输出到标准输出中。Web应用产生的异常错误，会输出到标准错误输出中。由于Web应用在生产环境都是以daemon方式运行(后台运行)，所以负责监控和管理Web应用进程的守护进程(例如supervisor)，就要搜集这些应用日志，以便查询和分析。\n\n分析应用日志时，一般需要结合日志上下文进行分析，因为一旦抛出异常错误，日志一般不是一行就能记录完的。异常日志一般会以代码调用追溯的方式来展现。例如：\n```\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-5-e3097d5bf3e6> in <module>()\n----\x3e 1 test1()\n\n<ipython-input-2-ee75a0b1ab43> in test1()\n      1 def test1():\n      2     print('test1 start')\n----\x3e 3     test2()\n      4     print('test1 end')\n      5 \n\n<ipython-input-4-a2967c4ec095> in test2()\n      1 def test2():\n      2     print('test2 start')\n----\x3e 3     raise RuntimeError('runtime error')\n      4     print('test2 end')\n      5 \n\nRuntimeError: runtime error\n```\n根据错误提示可以知道，在运行test1这个无参数的函数时，发生的异常，追溯到test1定义内部的第三行，调用test2这个无参数的函数时，再次追溯到test2定义内部的第三行，源头上，正是这里发生了异常，去掉这一行，修复异常，再次运行函数test1时，就能成功了。\n\n## 用户日志\n用户日志的产生，需要在Web应用代码中实现，常规做法，是将用户日志存储到数据库中，如果将用户日志存入到文件中，则可以归纳到应用日志中了，当然，这是一种不严谨的划分。\n\n我们知道，HTTP是无状态的协议，开发者利用cookie技术识别不同用户，这样一来，我们就可以区分相同客户端ip和相同电脑下的不同用户。有了更加细致的用户日志，我们可以做更加精细的统计分析。\n\n* 行为审计\n  * 用户日志可以记录用户在网站的所有行为，包括不限于浏览页面、修改资料、发送消息、付款等等，甚至可以细化到点击了哪些按钮。通过分析这些行为，购物网站可以分析出用户大致喜欢什么类型商品，内部网站可以审计用户的操作是否符合规范等等。\n\n* 热点分析\n  * 根据用户日志将用户进行分类，就可以分析网站更受什么样的人群的喜爱。通过用户喜爱商品的排名统计，可以分析出网站的最受欢迎的商品。根据商品销量排名，可以分析出网站的畅销商品。\n\n* 数据分析师可以根据这些用户日志，挖掘出更多的价值和隐藏的信息。\n\n##总结\n本文详细讨论了HTTP日志的分析使用，并对应用日志和用户日志的常规使用做出了说明，通过阅读本文，可以对Web应用下的日志和其使用案例有了初步的了解，更多的详情，可以参考更加详细的资料。\n",E='近几年，容器越来越火，也越来越好用，我也开始尝试使用容器来运行我的应用。本篇主要讲述如何将一个Flask应用正确地运行在Docker容器中。\n\n## 创建应用\n创建一个文件夹`testflask`。\n写一个Flask应用如下：\n`testflask/app.py`\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\'/\')\ndef hello():\n    return \'hello docker&flask\'\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n\n```\n一旦使用命令`python app.py`运行这个应用，打开浏览器，输入网址`127.0.0.1:5000`并回车，将会返回`hello docker&flask`这串字符。\n\n## 使用Gunicorn+Gevent运行Flask应用\n我们知道，Flask应用是一个符合WSGI规范的Python应用，不能独立运行（类似app.run的方式仅适合开发模式），需要依赖其他的组件提供服务器功能。在这里，我们选择Gunicorn+Gevent的组合。\n安装命令如下：\n```bash\npip install gunicorn gevent\n```\n书写Gunicorn的配置文件如下：\n`testflask/gunicorn.conf.py`\n```python\nworkers = 5    # 定义同时开启的处理请求的进程数量，根据网站流量适当调整\nworker_class = "gevent"   # 采用gevent库，支持异步处理请求，提高吞吐量\nbind = "0.0.0.0:8888"    # 监听IP放宽，以便于Docker之间、Docker和宿主机之间的通信\n```\n可以使用gunicorn命令来测试是否可以正确运行，命令如下：\n```bash\ngunicorn app:app -c gunicorn.conf.py\n```\n*一旦报错，则根据错误提示修复。*\n以前，接下来是配合supervisor将应用部署到主机上，supervisor的主要作用是监控和修复应用的运行状态。现在，将应用部署到Docker中，这个任务就交给Docker来实现(使用容器云平台例如kubernetes可以更好地实现这个功能)。\n\n##使用Docker运行Flask应用\n*本步骤依赖于安装完好的docker运行环境*\n完成两步之后，我们得到一个可以直接运行的Flask应用，现在，我们要将它的运行封装到Docker之中。\n我们需要为该应用创建一个requirements.txt文件，以便Docker环境的安装。\n`testflask/requirements.txt`\n```\nflask\ngunicorn\ngevent\n```\n有了这个文件，在安装Flask应用依赖的三方包时，可以直接用如下命令执行：\n```bash\npip install -r requirements.txt\n```\n然后我们还要创建一个Dockerfile文件，以便Docker镜像的构建：\n`testflask/Dockerfile`\n```Dockerfile\nFROM python:2\n\nWORKDIR /usr/src/app\n\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD ["gunicorn", "app:app", "-c", "./gunicorn.conf.py"]\n```\n完成这两个文件的创建之后，执行如下命令，就可以开始构建Docker镜像：\n```bash\nsudo docker build -t \'testflask\' .\n```\n*需要注意的是，下载python:2这个基础镜像可能需要花点时间，因为它有几百兆。*\n构建完成之后，通过如下命令查看镜像列表，可以发现testflask显示在其中：\n```bash\nsudo docker images\n```\n接下来，我们可以push镜像到镜像仓库进行分发，这里我们就在本机运行进行演示。\n*需要注意，公司的私有代码，不要push到公网的镜像仓库上*\n运行如下命令，临时运行docker镜像：\n```bash\nsudo docker run -it --rm -p 8888:8888 testflask\n```\n可以看到Docker镜像成功地运行起来了，并处于阻塞状态。这时，我们打开浏览器，输入`127.0.0.1:8888`，可以看到返回的网页中展示内容`hello docker&flask`。\n\n使用Docker运行到生产环境中(以daemon方式运行)，可以使用如下的类似命令：\n```bash\nsudo docker run -d -p 8888:8888 --name test-flask-1 testflask\n```\n规模化管理大量Docker容器时，推荐使用容器云来管理。\n## 总结\n使用Docker部署Flask应用，不仅需要理解Flask应用的常规部署方法，还要掌握Docker部署应用的技巧，才能成功地将两者结合起来使用。如果大规模迁移应用到Docker容器上，需要使用容器云来简化工作。\n',I="CMDB是Configuration Management Database的简称，中文翻译成配置管理数据库。\n\n只是这样的解释，一般人很难理解CMDB到底是一个什么东西，其真实情况是，每个人理解的CMDB可能都有所差异。用不着惊讶，CMDB本质上是一个数据库，存什么东西，当然是因人而异的。和计算机术语中“数据库”的差别是，CMDB不仅包含真实的数据库，而且隐含了管理者对资源的抽象和建模的逻辑。每个管理者所处环境不同，所以他所管理的资源的类型，数量和关系也不同，因此就不难理解，为什么市面上没有一款CMDB产品能够适应大部分场景。因此，自研CMDB的需求，也就愈发明显。\n\n# 运维认为的CMDB\n运维人员的工作内容，更注重于业务的发布和运行，因此，CMDB中至少需要管理的有：主机、IP、端口、应用和域名。如果使用了Kubernetes集群，还要关注Kubernetes集群资源。\n\n如无特殊说明，以下讨论的CMDB都指运维认为的CMDB\n\n# CMDB中资源管理的原则\n## 基础性\n存储到CMDB中的资源，应是最基础的资源。\n\n由于使用CMDB的人员大多隶属运维或基础设施部门，因此，CMDB中不应该存储抽象层很高或者较复杂的的资源。一来是用不到，二来是这会让CMDB的设计过于复杂，第三个是难以维护数据。\n\nCMDB中可以存储的资源有：服务器、人员、应用、域名等。\n\n不建议存储的资源：公司组织结构、业务调用逻辑等。\n\n另外，基础性的解释，还可以用于调用关系。CMDB应该提供基础资源服务接口，并被另外的工具所调用，尽量不或者少调用其他基础服务，不能主动调用中、高级服务，避免环形调用出现调用循环问题。\n\n## 权威性\n存储到CMDB中的数据，应该是最准确的，这样一来，建立了权威性之后，才拥有了对CMDB的运营推动能力。\n\n一旦CMDB中的数据并非最准确的，那么用户就会考虑通过其他渠道获取数据，甚至是自行维护一套数据，这样一来，CMDB就失去了存在的意义。\n\n## 完整性\n考虑权威性之后，还要考虑完整性。虽然CMDB中的数据是准确的，但是一旦数据的覆盖面不够全，也会导致使用的时候出现问题。\n\n例如，当我在CMDB中查找一台IP地址为10.0.0.1的服务器时，没有查找到。如果CMDB中服务器数据是完整的，那么我可以认为不存在这样一台服务器；反之，我还要通过其他渠道来核实是否真的不存在这样一台服务器，效率下降明显。\n\n# CMDB应该有什么功能\n## 资源管理功能\n简单的来说，就是资源的增删查改功能，这是必须的基础功能。\n\n## 资源关系梳理\n不同资源不是孤立存在的，相互之间存在一定的关系。\n\n比如说一条服务器资源数据，有一个字段是其负责人，这个负责人就是人员资源的一条数据。\n\n特殊情况下，同一种资源之间也存在关系，例如人员资源，可以有上下级关系，如果要维护这个关系，就需要对其关系进行梳理和存储。\n\n## 对外提供数据服务\nCMDB建立之初，需要管理员维护数据。当数据维护达到权威性和完整性的标准之后，就具备了对外提供服务的能力。\n\n常规对外提供服务的方式可以有：\n1. 开发Web界面，对真实用户提供服务\n2. 开发标准API接口，对第三方工具提供服务\n\n# CMDB不应该有哪些功能\n## 工单流程管理\n工单流程管理是一种流程管理手段，通过提交工单，逐级审批的方式，实现流程的流转，并可以提供回调Hook来自动执行某些操作。\n\n这样一个工单流程管理的功能，不仅需要对工单流程有详尽的了解，还需要对每个流程进行定制。实际上这样的一个功能不属于资源管理的范畴，徒增了项目的复杂度，还会导致定位不清晰。\n\n## 数据版本管理\n数据版本管理一般要求存储数据的历史版本和变更信息，并利用这些信息进行版本管理。而CMDB的数据管理原则要求了权威性和完整性，存储历史版本的需求不大，徒增复杂性。\n\n# CMDB可用于那些服务和流程\n## 监控管理\n使用CMDB我们可以获得完整的主机列表，并对这些主机进行监控。\n\n## 发布管理\n使用CMDB和监控我们可以选择在合适的主机发布应用\n\n## 批量执行\n使用CMDB我们可以有的放矢地进行批量操作\n",U=[{author:"一进制",title:"什么是CMDB",summary:"本文与你分享我对CMDB的一些理解",content:I,image:"mountaincabin.jpg",date:"2019-07-26",color:"cyan",tag:["CMDB","运维"]},{author:"一进制",title:"全面拥抱unicode(Python3.0)",summary:"本文与你分享Python3的字符串编码改变",content:B,image:"pigduck.jpg",date:"2018-02-08",color:"blue",tag:["Python","Python3","unicode"]},{author:"一进制",title:"Print语句改成函数(Python3.0)",summary:"本文与你分享Python3对print语法的种种改造",content:W,image:"snowcabin.jpg",date:"2018-02-08",color:"indigo",tag:["Python","Python3","print"]},{author:"一进制",title:"Web图片的使用场景及其管理",summary:"本文与你分享浏览器Html页面中，图片的使用技巧",content:F,image:"mountain.jpg",date:"2018-01-10",color:"deep-purple",tag:["Web","Image"]},{author:"一进制",title:"Web开发中常用的数据关系",summary:"本文与你分享在Web开发中常用到的数据关系",content:$,image:"adventurecave.jpg",date:"2018-01-03",color:"purple",tag:["Web","Database"]},{author:"一进制",title:"Web应用的日志及其使用场景",summary:"本文与你分享Web应用场景下的日志",content:R,image:"firepots.jpg",date:"2017-12-30",color:"pink",tag:["Web","Log"]},{author:"一进制",title:"用Docker部署Flask应用",summary:"本文与你分享极简Flask应用部署到Docker上的步骤",content:E,image:"swedishfishing.jpg",date:"2017-12-12",color:"red",tag:["Docker","Flask","Deploy"]}],H="# 技术类\n\n<br />\n<br />\n\n## Flask 学习交流(484327418)qq群专用技术分享url\n\n<br />\n\n| 分享人  | github                        | blog                             | 备注   |\n| ---- | ----------------------------- | -------------------------------- | ---- |\n| 大肥   | https://github.com/Haner27    |                                  |      |\n| 一进制（我的） | https://github.com/luhuisicnu | https://luhuisicnu.github.io https://www.jianshu.com/u/eab692427e63 |      |\n| 巫书轶 | https://github.com/wushuyi | http://www.wushuyi.com/ |      |\n| 大月巴 | | https://my.oschina.net/u/2333235/blog |      |\n| Lanny | | http://blog.csdn.net/iiiiher | |\n\n## Flask\n\n<br />\n\n[Miguel Grinberg（狗书作者）的博客](https://blog.miguelgrinberg.com/)\n\n[2017版本(Python3)The Flask Mega Tutorial中文翻译----我翻译的](https://github.com/luhuisicnu/The-Flask-Mega-Tutorial-zh)\n\n## Django\n\n<br />\n\n[Django Rest Framework, 好用的Restful API框架](https://www.django-rest-framework.org/)\n\n[Django Rest Framework JWT, 与Django Rest Framework配套的JWT插件](http://getblimp.github.io/django-rest-framework-jwt/)\n\n## Docker & Kubernetes\n\n<br />\n\n[Dockone 实时Docker&K8S咨询论坛](http://dockone.io/)\n\n[张磊的深入剖析Kubernetes教程](https://time.geekbang.org/column/intro/116)\n\n[手工一步步搭建Kubernetes集群教程](https://github.com/opsnull/follow-me-install-kubernetes-cluster)\n\n__________________________\n\n<br />\n<br />\n\n# 生活类\n\n<br />\n<br />\n\n## 摄影\n\n<br />\n\n[翁天信，无学历自学编程、摄影、网站设计](https://www.dandyweng.com/)\n\n[翁天信的摄影集网站](https://camarts.app/)\n";r["default"].use(p["a"]);var q=new p["a"].Store({state:{drawer:!1,links:e("1053"),articles:U,collection:H,myself:{name:"一进制",email:"luhuisicnu@163.com"}},mutations:{setDrawer:function(n,t){return n.drawer=t},toggleDrawer:function(n){return n.drawer=!n.drawer}}}),L=e("8c4f"),A=function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("div",n._l(n.queryArticles,function(t,i){return r("v-card",{key:t.title,staticClass:"my-5"},[r("v-parallax",{attrs:{src:e("7584")("./"+t.image),"aspect-ratio":"3.75"}}),r("v-card-title",[r("h1",[r("router-link",{attrs:{to:{name:"article",params:{index:i}}}},[n._v(n._s(t.title))])],1)]),r("v-card-text",[n._v(n._s(t.summary))])],1)}),1)},S=[],G={name:"Home",data:function(){return{}},computed:Object(c["a"])({},Object(p["c"])(["articles"]),{queryArticles:function(){var n=this;return this.$route.params.tag?this.articles.filter(function(t){return t.tag.indexOf(n.$route.params.tag)>-1}):this.articles}})},z=G,K=Object(m["a"])(z,A,S,!1,null,null,null),J=K.exports,N=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-card",[e("v-card-title",{attrs:{"primary-title":""}},[e("div",[e("h1",{staticClass:"mb-3"},[n._v(n._s(n.articles[n.$route.params.index].title))]),e("p",[n._v("作者："+n._s(n.articles[n.$route.params.index].author))]),e("p",[n._v("日期："+n._s(n.articles[n.$route.params.index].date))])])]),e("v-card-text",[e("div",{domProps:{innerHTML:n._s(n.marked(n.articles[n.$route.params.index].content))}})])],1)},Y=[],X={name:"Article",computed:Object(c["a"])({},Object(p["c"])(["articles"]))},Q=X,V=Object(m["a"])(Q,N,Y,!1,null,null,null),Z=V.exports,nn=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-card",[e("v-card-text",[e("v-list",{attrs:{"two-line":""}},n._l(n.tags,function(t){return e("v-list-tile",{key:t.title,attrs:{avatar:""}},[e("v-list-tile-content",[e("v-list-tile-title",[e("router-link",{attrs:{to:{name:"home",params:{tag:t.title}}}},[n._v(n._s(t.title))])],1),e("v-list-tile-sub-title",[n._v("找到"+n._s(t.count)+"篇")])],1),e("v-list-tile-action",[n._v("\n                    "+n._s(t.ratio)+"%\n                ")])],1)}),1)],1)],1)},tn=[],en=(e("456d"),e("ac6a"),{name:"Category",computed:Object(c["a"])({},Object(p["c"])(["articles"]),{tags:function(){var n=this,t=new Object;return this.articles.forEach(function(n){n.tag.forEach(function(n){t[n]?t[n]+=1:t[n]=1})}),Object.keys(t).map(function(e){return{title:e,count:t[e],ratio:(t[e]/n.total*100).toFixed(2)}})},total:function(){return this.articles.length}})}),rn=en,on=Object(m["a"])(rn,nn,tn,!1,null,null,null),an=on.exports,sn=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-card",[e("v-container",[e("div",[e("h3",[n._v("大家好，我是"+n._s(n.myself.name)+", 欢迎来到我的博客！")]),e("br"),e("p",[n._v("本博客是使用Vue开发的纯前端项目，如有交流需求，请发邮件至"+n._s(n.myself.email))])]),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("v-timeline",n._l(n.articles,function(t,r){return e("v-timeline-item",{key:r,attrs:{color:t.color,small:""},scopedSlots:n._u([{key:"opposite",fn:function(){return[e("span",{class:"headline font-weight-bold "+t.color+"--text",domProps:{textContent:n._s(t.date)}})]},proxy:!0}],null,!0)},[e("div",{staticClass:"py-3"},[e("h2",{class:"headline font-weight-light mb-3 "+t.color+"--text"},[n._v(n._s(t.title))]),e("div",[n._v("\n                "+n._s(t.summary)+"\n            ")])])])}),1)],1)],1)},cn=[],pn={name:"Self",computed:Object(c["a"])({},Object(p["c"])(["articles","myself"]))},ln=pn,un=Object(m["a"])(ln,sn,cn,!1,null,null,null),mn=un.exports,dn=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-card",[e("v-card-text",[e("div",{domProps:{innerHTML:n._s(n.marked(n.collection))}})])],1)},fn=[],gn={name:"Link",computed:Object(c["a"])({},Object(p["c"])(["collection"]))},hn=gn,bn=Object(m["a"])(hn,dn,fn,!1,null,null,null),_n=bn.exports;r["default"].use(L["a"]);var vn=new L["a"]({routes:[{path:"/",name:"index",component:J},{path:"/home",name:"home",component:J},{path:"/category",name:"category",component:an},{path:"/self",name:"self",component:mn},{path:"/collection",name:"collection",component:_n},{path:"/article/:index",name:"article",component:Z}]}),xn=e("ce5b"),yn=e.n(xn),kn=(e("bf40"),e("0e54")),jn=e.n(kn),wn=e("1487"),Dn=e.n(wn),Cn=(e("9f21"),function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("v-btn",n._g(n._b({style:n.styles,attrs:{fab:"",small:"",color:"primary"}},"v-btn",n.$attrs,!1),n.$listeners),[n._t("default")],2)}),Mn=[],On={name:"BaseBtn",inheritAttrs:!1,props:{square:Boolean},computed:{styles:function(){return{borderRadius:this.square?"2px":void 0}}}},Pn=On,Tn=Object(m["a"])(Pn,Cn,Mn,!1,null,null,null),Bn=Tn.exports;r["default"].component(Bn.name,Bn),r["default"].use(yn.a,{theme:{primary:"#CBAA5C",secondary:"#083759"},iconfont:"mdi"}),r["default"].config.productionTip=!1,jn.a.setOptions({renderer:new jn.a.Renderer,highlight:function(n){return Dn.a.highlightAuto(n).value},pedantic:!1,gfm:!0,tables:!0,breaks:!1,sanitize:!1,smartLists:!0,smartypants:!1,xhtml:!1}),r["default"].prototype.marked=jn.a,new r["default"]({router:vn,store:q,render:function(n){return n(T)}}).$mount("#app")},"5b47":function(n,t,e){n.exports=e.p+"img/snowcabin.b595e70f.jpg"},"5f6f":function(n,t,e){n.exports=e.p+"img/umbrella.62b01f45.jpg"},7030:function(n,t,e){n.exports=e.p+"img/firepots.7fd55107.jpg"},7554:function(n,t,e){n.exports=e.p+"img/july4.e77a6053.jpg"},7584:function(n,t,e){var r={"./adventurealtitude.jpg":"17fc","./adventurecave.jpg":"3db9","./ancient.jpg":"ff02","./ancientruins.jpg":"1c5b","./artoftravel.jpg":"098a","./autumnclouds.jpg":"e79c","./beachjar.jpg":"d794","./blurcamera.jpg":"10bd","./christmas.jpg":"139c","./firepots.jpg":"7030","./garden.jpg":"e699","./greengrass.jpg":"9832","./jellyfish.jpg":"b405","./july4.jpg":"7554","./lightcave.jpg":"ec1c","./marketgrains.jpg":"1597","./moroccandays.jpg":"8743","./mountain.jpg":"ecd1","./mountaincabin.jpg":"a863","./pigduck.jpg":"fd3a","./rain.jpg":"882a","./ruins.jpg":"7e3d","./snowcabin.jpg":"5b47","./snowcup.jpg":"edd8","./spices.jpg":"3023","./sunset.jpg":"3a3c","./swedishfishing.jpg":"36f5","./umbrella.jpg":"5f6f"};function i(n){var t=o(n);return e(t)}function o(n){var t=r[n];if(!(t+1)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return t}i.keys=function(){return Object.keys(r)},i.resolve=o,n.exports=i,i.id="7584"},"7e3d":function(n,t,e){n.exports=e.p+"img/ruins.9a11d5b2.jpg"},8743:function(n,t,e){n.exports=e.p+"img/moroccandays.118acbab.jpg"},"882a":function(n,t,e){n.exports=e.p+"img/rain.9ab01c46.jpg"},9832:function(n,t,e){n.exports=e.p+"img/greengrass.4c0f4c29.jpg"},a863:function(n,t,e){n.exports=e.p+"img/mountaincabin.f6547f5f.jpg"},b405:function(n,t,e){n.exports=e.p+"img/jellyfish.0782ae1d.jpg"},cf05:function(n,t,e){n.exports=e.p+"img/logo.00401b0f.png"},d794:function(n,t,e){n.exports=e.p+"img/beachjar.8c3df2fc.jpg"},e699:function(n,t,e){n.exports=e.p+"img/garden.de83b1a7.jpg"},e79c:function(n,t,e){n.exports=e.p+"img/autumnclouds.e44135e5.jpg"},ec1c:function(n,t,e){n.exports=e.p+"img/lightcave.52150edc.jpg"},ecd1:function(n,t,e){n.exports=e.p+"img/mountain.5394e7f1.jpg"},edd8:function(n,t,e){n.exports=e.p+"img/snowcup.a42567f1.jpg"},fd3a:function(n,t,e){n.exports=e.p+"img/pigduck.37a6bcfd.jpg"},ff02:function(n,t,e){n.exports=e.p+"img/ancient.6211215e.jpg"}});
//# sourceMappingURL=app.61b07247.js.map